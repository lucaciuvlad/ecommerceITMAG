.cart {
  padding: 1rem;
  display: flex;
  flex-direction: column;

  @include mq(medium) {
    padding: 0 2rem;
  }

  @include mq(large) {
    padding: 0 5rem;
    display: grid;
    grid-template-columns: 0.3fr 0.3fr 0.4fr;
    grid-template-areas: "header header header" "productInfo productInfo cartInfo";
    position: relative;

    &.emptyCart {
      display: flex;
      flex-direction: column;
    }
  }

  &__empty {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: static;
    transition: getMap($transitions, visibility), getMap($transitions, z-index),
      getMap($transitions, opacity);

    @include mq(large) {
      width: 85%;
      height: calc(100vh - 12rem);
      margin: 0 auto;
      grid-area: emptyCart;
    }

    & > h3,
    & > p {
      padding: 0.7rem;
    }

    & > a {
      margin-top: 0.5rem;
      padding: 0.7rem;
      background-color: getMap($colors, primary-color);
      color: #fff;
      border-radius: $border-radius;
      transition: getMap($transitions, bg-color);

      &:hover {
        background-color: getMap($colors, secondary-color);
      }
    }

    &.hidden {
      opacity: 0;
      visibility: hidden;
      z-index: -1;
      position: absolute;
      left: 0;
    }
  }

  & > h1 {
    width: 100%;
    height: 3rem;
    margin: 1rem 0;
    display: flex;
    align-items: center;

    @include mq(large) {
      grid-area: header;
    }
  }

  &__products {
    width: 100%;
    height: 100%;

    @include mq(large) {
      grid-area: productInfo;
    }
  }

  &__product {
    width: 100%;
    height: 10rem;
    display: grid;
    margin: 0.5rem 0;
    grid-template-columns: 0.3fr 0.2fr 0.5fr;
    grid-template-areas: "img info info" "img range actions" "img price price";
    border: 1px solid getMap($colors, text-color-light);
    border-radius: $border-radius;
    transition: getMap($transitions, box-shadow);

    &:hover {
      box-shadow: 0 0 0.7rem rgba(getMap($colors, text-color-light), 0.7);
    }

    &:hover > img {
      transform: scale(1.05);
    }

    & > img {
      grid-area: img;
      width: 100%;
      height: 10rem;
      padding: 1rem;
      object-fit: contain;
      transition: getMap($transitions, transform);
    }

    & > a {
      grid-area: info;
      font-weight: 1000;
      padding: 0.5rem;
      margin: 0.5rem 0;
    }

    & > .range {
      grid-area: range;
      position: relative;

      & .range-header {
        width: 3rem;
        height: 2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid getMap($colors, text-color);
        border-radius: $border-radius;
        cursor: pointer;

        &.activeNumbers {
          border-bottom-left-radius: 0;
          border-bottom-right-radius: 0;
        }

        &:hover > i {
          color: getMap($colors, text-color-light);
        }

        & > span {
          margin: 0 0.3rem;
        }

        & > i {
          color: getMap($colors, text-color);
          transition: getMap($transitions, color);
        }
      }

      & > ul {
        position: absolute;
        top: 2rem;
        left: 0;
        width: 3rem;
        border: 1px solid getMap($colors, text-color);
        border-top: 0;
        border-radius: 0 0 $border-radius $border-radius;
        background-color: #fff;
        z-index: 9;
        opacity: 0;
        visibility: hidden;
        transform: translateY(-1rem);
        transition: getMap($transitions, visibility),
          getMap($transitions, transform), getMap($transitions, opacity);

        &.active {
          visibility: visible;
          transform: translateY(0);
          opacity: 1;
        }

        & > li {
          width: 100%;
          height: 1.5rem;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          transition: getMap($transitions, bg-color),
            getMap($transitions, color);

          &:hover {
            background-color: rgba(getMap($colors, text-color-light), 0.5);
            color: #fff;
          }

          &.active {
            background-color: rgba(getMap($colors, text-color-light), 0.5);
            color: #fff;
          }
        }
      }
    }

    & > .actions {
      grid-area: actions;
      height: 2rem;
      display: flex;
      justify-content: flex-end;

      & > button {
        margin: 0 0.5rem;
        padding: 0.5rem;
        display: flex;
        align-items: center;
        border-radius: $border-radius;
        cursor: pointer;

        & span {
          color: #fff;
          font-size: 0.8rem;
        }

        & i {
          color: #fff;
          font-size: 1rem;
          margin-right: 0.5rem;
        }

        &.addToFav {
          background-color: rgba(getMap($colors, primary-color), 0.7);
          transition: getMap($transitions, bg-color);

          &:hover {
            background-color: getMap($colors, primary-color);
          }
        }

        &.removeFromCart {
          background-color: rgba(getMap($colors, danger-color), 0.7);
          transition: getMap($transitions, bg-color);

          &:hover {
            background-color: getMap($colors, danger-color);
          }
        }
      }
    }

    & > .price {
      grid-area: price;
      display: flex;
      align-items: center;
      margin: 0.7rem 0;

      & > p {
        display: flex;
        align-items: flex-start;
        margin: 0 0.5rem;

        &.oldPrice {
          text-decoration: line-through;

          & > span {
            font-size: 0.85rem;
          }

          &.hidden {
            display: none;
          }
        }

        &.newPrice {
          color: getMap($colors, danger-color);

          & > span {
            font-size: 1.05rem;
            font-weight: 1000;
          }
        }

        & > span {
          font-size: 0.75rem;
        }

        & > sup {
          font-size: 0.65rem;
        }
      }
    }
  }
}

.cartInfo {
  width: 75%;
  margin: 1rem auto;
  padding: 0 0.5rem;
  box-shadow: 0 0 0.7rem rgba(getMap($colors, primary-color), 0.7);
  border-radius: $border-radius;
  transition: getMap($transitions, box-shadow);

  @include mq(large) {
    grid-area: cartInfo;
    align-self: flex-start;
    position: sticky;
    top: 5rem;
    left: 100%;
  }

  &:hover {
    box-shadow: 0 0 0.7rem rgba(getMap($colors, secondary-color), 0.7);
  }

  &.hidden {
    opacity: 0;
    visibility: hidden;
    z-index: -1;
    position: absolute;
    left: 0;
  }

  & > h2 {
    height: 3rem;
    display: flex;
    align-items: center;
  }

  & > .productInfo {
    display: flex;
    flex-direction: column;

    & > .productPrice,
    & > .productTax,
    & > .productQuantity {
      display: flex;
      align-items: center;
      justify-content: space-between;

      & > span {
        width: 75%;
      }

      & > p {
        width: 25%;
        display: flex;
        align-items: flex-start;
        margin: 0 0.5rem;

        &.newPrice {
          color: getMap($colors, text-color);

          & > span {
            font-size: 1.05rem;
            font-weight: 1000;
          }
        }

        & > span {
          font-size: 0.9rem;
        }

        & > sup {
          font-size: 0.65rem;
        }
      }
    }
  }

  & > .cartTotal {
    display: flex;
    flex-direction: column;
    margin: 1rem 0;

    & > .total {
      display: flex;
      align-items: center;

      & > span {
        font-weight: 1000;
        font-size: 1.1rem;
      }

      & > p {
        display: flex;
        align-items: flex-start;
        margin: 0 0.5rem;

        &.newPrice {
          color: getMap($colors, text-color);

          & > span {
            font-size: 1.05rem;
            font-weight: 1000;
          }
        }

        & > span {
          font-size: 0.9rem;
        }

        & > sup {
          font-size: 0.65rem;
        }
      }
    }

    & > .checkoutBtn {
      padding: 0.5rem;
      margin: 0.5rem 0;
      background-color: rgba(getMap($colors, primary-color), 0.7);
      color: #fff;
      border-radius: $border-radius;
      cursor: pointer;
      transition: getMap($transitions, bg-color);

      &:hover {
        background-color: getMap($colors, secondary-color);
      }
    }
  }
}
